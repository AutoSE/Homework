import{_ as s,c as n,o as a,a as l}from"./app.c68688ac.js";const F=JSON.parse('{"title":"Script","description":"","frontmatter":{},"headers":[{"level":2,"title":"Scripting Tricks","slug":"scripting-tricks","link":"#scripting-tricks","children":[]},{"level":2,"title":"About LUA","slug":"about-lua","link":"#about-lua","children":[{"level":3,"title":"Some Coding Convetions","slug":"some-coding-convetions","link":"#some-coding-convetions","children":[]}]},{"level":2,"title":"Test-Drive Development","slug":"test-drive-development","link":"#test-drive-development","children":[]},{"level":2,"title":"Pseudo-random numbers","slug":"pseudo-random-numbers","link":"#pseudo-random-numbers","children":[]},{"level":2,"title":"Settings","slug":"settings","link":"#settings","children":[]}],"relativePath":"onScript.md"}'),o={name:"onScript.md"},e=l(`<h1 id="script" tabindex="-1">Script <a class="header-anchor" href="#script" aria-hidden="true">#</a></h1><h2 id="scripting-tricks" tabindex="-1">Scripting Tricks <a class="header-anchor" href="#scripting-tricks" aria-hidden="true">#</a></h2><p>If you look at my code, there are some common things:</p><ul><li><p>written in a version control systems (Github)</p></li><li><p>undergoing continuous integration every time I commit anything (e.g. resteting all scripts)</p></li><li><p>coded in LUA</p></li><li><p>an initial help string (from which I derive global settings)</p><ul><li>this is used to drive a really simple way to control the code via command-line flags</li></ul></li><li><p>a random number generator (which is initialized from one the settings in the help string)</p></li><li><p>a reader system that inputs CSV files with named columns</p><ul><li>this generated a data model of five classes seen in most of my code (DATA, ROW, COLS, NUM, SYM)</li></ul><h2 id="version-contol" tabindex="-1">Version Contol <a class="header-anchor" href="#version-contol" aria-hidden="true">#</a></h2></li></ul><p>A &quot;good&quot; repository has &quot;bling&quot; boasting its competency (see my badges above).</p><ul><li>To build you own bling, see <a href="https://shields.io/" target="_blank" rel="noreferrer">https://shields.io/</a>.</li><li>Make sure your bling includes <ul><li>Something that links to your GH tests: <a href="https://github.com/timm/tested/actions/workflows/tests.yml"><img src="https://github.com/timm/tested/actions/workflows/tests.yml/badge.svg"></a></li><li>Something that shows you are running long term backups of your repo: <a href="https://zenodo.org/badge/latestdoi/569981645"><img src="https://zenodo.org/badge/569981645.svg" alt="DOI"></a></li></ul></li></ul><table><thead><tr><th style="text-align:right;">Recommended files</th><th style="text-align:left;">Notes</th></tr></thead><tbody><tr><td style="text-align:right;">/.gitignore</td><td style="text-align:left;">lists of files never to commit (e.g. compiler intermediaries). To find the right ignores for your tools, see the <a href="https://github.com/github/gitignore/" target="_blank" rel="noreferrer">Github ignore repo</a></td></tr><tr><td style="text-align:right;"><a href=".github/workflows/tests.yml">/.github/workflows/tests.yaml</a></td><td style="text-align:left;">on each commit, runs the /src/lua files with <code>lua file.lua -g all</code> and reports a crash if any produce a non-zero error code</td></tr><tr><td style="text-align:right;">/CITATION.cff</td><td style="text-align:left;">for bibliography information<br>To make your own file, use <a href="https://citation-file-format.github.io/cff-initializer-javascript/#/" target="_blank" rel="noreferrer">this generator</a></td></tr><tr><td style="text-align:right;">/LICENSE.md</td><td style="text-align:left;">open source license<br>To browse different licenses, go to <a href="https://choosealicense.com/licenses/" target="_blank" rel="noreferrer">choose a license</a></td></tr><tr><td style="text-align:right;">/Makefile</td><td style="text-align:left;">for any tricky scripting stuff: pretty tricky stuff (not for everyone)<br>For notes on cool Makefile tricks, see <a href="https://swcarpentry.github.io/make-novice/08-self-doc/index.html" target="_blank" rel="noreferrer">Automation and Make</a></td></tr><tr><td style="text-align:right;">/README.md</td><td style="text-align:left;">top-level doco file</td></tr><tr><td style="text-align:right;">/docs</td><td style="text-align:left;">for markdown files<br> Anything starting with <code>on*</code> is a lecture file. All other files are generated from the comments in the files in <code>/src/*.lua</code>.</td></tr><tr><td style="text-align:right;">/etc</td><td style="text-align:left;">for local config files</td></tr><tr><td style="text-align:right;">/etc/img</td><td style="text-align:left;">for images</td></tr><tr><td style="text-align:right;">/etc/out</td><td style="text-align:left;">cache for experimental output logs</td></tr><tr><td style="text-align:right;">/src</td><td style="text-align:left;">for code</td></tr></tbody></table><h2 id="about-lua" tabindex="-1">About LUA <a class="header-anchor" href="#about-lua" aria-hidden="true">#</a></h2><p>I use LUA as an executable specification language. Students rewrite my code in whatever language they like (that is not LUA).</p><ul><li>For quick tutorials on LUA, see <a href="https://learnxinyminutes.com/docs/lua/" target="_blank" rel="noreferrer">learnlua</a></li><li>For full details on LUA, see the <a href="https://www.lua.org/pil/contents.html" target="_blank" rel="noreferrer">Programming in LUA</a> book.</li></ul><p>LUA is an ultra lightweight scripting language comprising less than two dozen keywords: <strong>and, break, do, else, elseif, end, false, for, function, if, in, local, nil, not, or, repeat, return, then, true, until, while</strong>.<br> LUA has a considerably smaller footprint than other programming languages (with its complete source code and documentation taking a mere 1.3 MB). Despite this it is very powerful language For example, here is define generic N-levels deep print function for LUA lists, as well as the mapping functions that makes that so simple to implement:</p><div class="language-lua"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">fmt</span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;">string.format</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">sort</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">t</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">fun</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">table.sort</span><span style="color:#A6ACCD;">(t,fun); </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> t </span><span style="color:#89DDFF;font-style:italic;">end</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">map</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">t</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">fun</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">     </span><span style="color:#A6ACCD;font-style:italic;">u</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">--&gt; t; map a function \`fun\`(v) over list (skip nil results) </span></span>
<span class="line"><span style="color:#A6ACCD;">  u</span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;">{}; </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;"> k,v </span><span style="color:#89DDFF;font-style:italic;">in</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">pairs</span><span style="color:#A6ACCD;">(t) </span><span style="color:#89DDFF;font-style:italic;">do</span><span style="color:#A6ACCD;"> v,k</span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;">fun</span><span style="color:#A6ACCD;">(v); u[k </span><span style="color:#89DDFF;">or</span><span style="color:#A6ACCD;"> (</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">+#</span><span style="color:#A6ACCD;">u)]</span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;">v </span><span style="color:#89DDFF;font-style:italic;">end</span><span style="color:#A6ACCD;">;  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> u </span><span style="color:#89DDFF;font-style:italic;">end</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;font-style:italic;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">kap</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">t</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">fun</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">     </span><span style="color:#A6ACCD;font-style:italic;">u</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">--&gt; t; map function \`fun\`(k,v) over list (skip nil results) </span></span>
<span class="line"><span style="color:#A6ACCD;">  u</span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;">{}; </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;"> k,v </span><span style="color:#89DDFF;font-style:italic;">in</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">pairs</span><span style="color:#A6ACCD;">(t) </span><span style="color:#89DDFF;font-style:italic;">do</span><span style="color:#A6ACCD;"> v,k</span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;">fun</span><span style="color:#A6ACCD;">(k,v); u[k </span><span style="color:#89DDFF;">or</span><span style="color:#A6ACCD;"> (</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">+#</span><span style="color:#A6ACCD;">u)]</span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;">v; </span><span style="color:#89DDFF;font-style:italic;">end</span><span style="color:#A6ACCD;">; </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> u </span><span style="color:#89DDFF;font-style:italic;">end</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">show</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">k</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;font-style:italic;">v</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">not</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">tostring</span><span style="color:#A6ACCD;">(k):</span><span style="color:#82AAFF;">find</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">^_</span><span style="color:#89DDFF;">&quot; </span><span style="color:#89DDFF;font-style:italic;">then</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">fmt</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">:%s %s</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">,</span><span style="color:#82AAFF;">o</span><span style="color:#A6ACCD;">(k),</span><span style="color:#82AAFF;">o</span><span style="color:#A6ACCD;">(v)) </span><span style="color:#89DDFF;font-style:italic;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">end</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">o</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">t</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;font-style:italic;">flag</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">type</span><span style="color:#A6ACCD;">(t)</span><span style="color:#89DDFF;">~=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">table</span><span style="color:#89DDFF;">&quot; </span><span style="color:#89DDFF;font-style:italic;">then</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">tostring</span><span style="color:#A6ACCD;">(t) </span><span style="color:#89DDFF;font-style:italic;">end</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">{</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">..</span><span style="color:#82AAFF;">table.concat</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">#</span><span style="color:#A6ACCD;">t</span><span style="color:#89DDFF;">&gt;</span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">and</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">not</span><span style="color:#A6ACCD;"> flag </span><span style="color:#89DDFF;">and</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">map</span><span style="color:#A6ACCD;">(t,o) </span></span>
<span class="line"><span style="color:#A6ACCD;">                                </span><span style="color:#89DDFF;">or</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">sort</span><span style="color:#A6ACCD;">(</span><span style="color:#82AAFF;">kap</span><span style="color:#A6ACCD;">(t,show)),</span></span>
<span class="line"><span style="color:#A6ACCD;">                           </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">..</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">}</span><span style="color:#89DDFF;">&quot; </span><span style="color:#89DDFF;font-style:italic;">end</span></span>
<span class="line"></span></code></pre></div><p>Note that in the above, functions can be treated as variables; i,e, LUA has first-class functions. LUA also has tail call optimization which means functions that call themselves as the last step in their code can recurse indefinitely. I actually view LUA as LISP (without (all (those (infuriating (silly (parentheses)))))).</p><h3 id="some-coding-convetions" tabindex="-1">Some Coding Convetions <a class="header-anchor" href="#some-coding-convetions" aria-hidden="true">#</a></h3><ul><li>The help file /docs/X.md is generated from the doco in /src/X.lua</li><li>Vars are global by default unless marked with &quot;local&quot; or defined in function argument lists.</li><li>Functions must be names before they are used</li><li>There is only one underling data structure (a table): <ul><li>Tables can have numeric or symbolic keys.</li><li>Simple tables have consecutive numeric keys amd are said to have size #t&gt;0i</li><li>Other tables have symbolic keys and are said to have size #t==0.</li></ul></li><li>Tables start and end with {}</li><li>Global settings are stores in <code>the</code> table which is generated from <code>help</code>. E.g. from the above the.budget =16</li><li>For all <code>key=value</code> in <code>the</code>, a command line flag <code>-k X</code> means <code>value</code>=X</li><li>At startup, we run <code>go[the.go]</code></li><li><code>for pos,x in pairs(t) do</code> is the same as python&#39;s <code>for pos,x in enumerate(t) do</code></li><li>In my object system, instances are named <code>i</code> (since that is shorter than <code>self</code>)</li></ul><p>In the public function arguments, the following conventions apply (usually):</p><ul><li>Four spaces denote start of local args.</li><li>Two spaces denote start of optional args</li><li>n = number; e.g. n, nItems, n1</li><li>s = string; e.g. s, sName, s1</li><li>t = table; e.g. t, t1</li><li>is = boolean; e.g. isHappy</li><li>x = anything; e.g x</li><li>fun = function; e.g. fun, accessFun</li><li>UPPER = class; e.g. NUM</li><li>lower = instance; e.g. num,num1</li><li>xs = a table of &quot;x&quot;; e.g. ns is a list of numbers and ss is a list of strings.</li></ul><h2 id="test-drive-development" tabindex="-1">Test-Drive Development <a class="header-anchor" href="#test-drive-development" aria-hidden="true">#</a></h2><p>Have lots of unit tests!<br> Run them, a lot!<br> Get them all passing before checking back to main!<br> Do not make test-driven development into a religion!</p><img src="https://github.com/txt/se20/blob/master/etc/img/tddscreen.png"><p>Tests suites that run every time you save code</p><p>TDD= red, green, refactor</p><ul><li>Build tests first</li><li>Repeat: <ul><li>Red = fund a broken test</li><li>Green= fix the test</li><li>Refactor= sometimes, clean things up <ul><li>Refactoring means functionality <em>stays the same</em> but the resulting <em>code is simpler</em>.</li></ul></li></ul></li></ul><p>TDD perhaps oversold [^Karac].</p><ul><li>But, at the very least, it is a great way to &quot;get into the zone&quot; faster, every morning</li><li>Also, a good way to share code <ul><li>&quot;what does your code do? lets look at the tests!&quot;</li><li>&quot;Hey, nice trick, lets document it in a trick so everyone can know it from now on&quot;</li></ul></li></ul><p>The end of my code ends with a set of <code>eg</code> definitions for a test suite. I&#39;ve coded this many ways but some things are constant.</p><ul><li>Each test has a short name [1]</li><li>Each test has a longer help text [2]</li><li>Each test includes some executable code [3].</li></ul><p>E.g. here&#39;s a demo that normalizes all row cells:</p><div class="language-lua"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">-- [1] short name  [2] longer help text              [3] code function</span></span>
<span class="line"><span style="color:#82AAFF;">eg</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">norm</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">,         </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">does data normalization work?</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">,  </span><span style="color:#89DDFF;font-style:italic;">function</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">local</span><span style="color:#A6ACCD;"> data,rows,row,x</span></span>
<span class="line"><span style="color:#A6ACCD;">  data</span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;">DATA</span><span style="color:#A6ACCD;">(the.</span><span style="color:#FFCB6B;">file</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;"> i</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;">,</span><span style="color:#F78C6C;">10</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">do</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#A6ACCD;">    row </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">any</span><span style="color:#A6ACCD;">(data.</span><span style="color:#FFCB6B;">rows</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;"> _,col </span><span style="color:#89DDFF;font-style:italic;">in</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">pairs</span><span style="color:#A6ACCD;">(data.</span><span style="color:#FFCB6B;">cols</span><span style="color:#A6ACCD;">.</span><span style="color:#FFCB6B;">x</span><span style="color:#A6ACCD;">) </span><span style="color:#89DDFF;font-style:italic;">do</span></span>
<span class="line"><span style="color:#A6ACCD;">      x </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> row.</span><span style="color:#FFCB6B;">cells</span><span style="color:#A6ACCD;">[col.</span><span style="color:#FFCB6B;">at</span><span style="color:#A6ACCD;">]</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#82AAFF;">print</span><span style="color:#A6ACCD;">(x, </span><span style="color:#FFCB6B;">col</span><span style="color:#A6ACCD;">:</span><span style="color:#82AAFF;">norm</span><span style="color:#A6ACCD;">(x))  </span><span style="color:#89DDFF;font-style:italic;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">end</span><span style="color:#A6ACCD;"> )</span></span>
<span class="line"></span></code></pre></div><p>On the command line, this example can called with the <code>-g</code> flag (&quot;g&quot; for &quot;go&quot;). For example, to run the above:</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">lua code.lua -g norm</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>There is also a <code>all</code> flag which runs all tests:</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">lua code.lua -g all</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>If test returns false, it is called a failure. When called with the <code>-g all</code> flag, the numbers of failures is return to the operating system.</p><h2 id="pseudo-random-numbers" tabindex="-1">Pseudo-random numbers <a class="header-anchor" href="#pseudo-random-numbers" aria-hidden="true">#</a></h2><p>Just to show a sample of the code we are going to explore...</p><ul><li>Computers cannot really do random numbers <ul><li>and often you do not want to <ul><li>when debugging you want to reproduce a prior sequence.</li></ul></li></ul></li><li>Psuedo-random numbers: <ul><li>Comptue a new number from a seed. Update the seed. Return the number.</li><li>To rerun old sequence, reset the seed</li></ul></li><li>Empirical notes: <ul><li>keep track of your seeds (reproducability)</li><li>always reset your seed in the right place (war story: 2 years of work lost)</li></ul></li><li>Here is a very simpler random generator <a href="https://en.wikipedia.org/wiki/Lehmer_random_number_generator" target="_blank" rel="noreferrer">(Lehmer, aka Park-Miller)</a>. Lets just say that more complex generators are much more complex:</li></ul><div class="language-lua"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">Seed</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">937162211</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">rand</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">lo</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;font-style:italic;">hi</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">  lo, hi </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> lo </span><span style="color:#89DDFF;">or</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;">, hi </span><span style="color:#89DDFF;">or</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span></span>
<span class="line"><span style="color:#A6ACCD;">  Seed </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> (</span><span style="color:#F78C6C;">16807</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> Seed) </span><span style="color:#89DDFF;">%</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2147483647</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> lo </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> (hi</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">lo) </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> Seed </span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2147483647</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">end</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">rint</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">lo</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;font-style:italic;">hi</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">math.floor</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">0.5</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">rand</span><span style="color:#A6ACCD;">(lo,hi)) </span><span style="color:#89DDFF;font-style:italic;">end</span></span>
<span class="line"></span></code></pre></div><h2 id="settings" tabindex="-1">Settings <a class="header-anchor" href="#settings" aria-hidden="true">#</a></h2><p>The code using options whose defaults are defined and extracted from a help string (offered at start of file):</p><div class="language-lua"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">local</span><span style="color:#A6ACCD;"> the,help</span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;">{},</span><span style="color:#89DDFF;">[[</span><span style="color:#C3E88D;">  </span></span>
<span class="line"><span style="color:#C3E88D;">fish1,lua : sort many &lt;X,Y&gt; things on Y, after peeking at just a few Y things</span></span>
<span class="line"><span style="color:#C3E88D;">(c)2022 Tim Menzies &lt;timm@ieee.org&gt; BSD-2</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#C3E88D;">Note: fish1 is just a demonststraing of this kind of processing.</span></span>
<span class="line"><span style="color:#C3E88D;">It is designed to be incomplete, to have flaws. If you look at this</span></span>
<span class="line"><span style="color:#C3E88D;">case say say &quot;a better way to do this wuld be XYZ&quot;, then fish1 has</span></span>
<span class="line"><span style="color:#C3E88D;">been successful.</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#C3E88D;">USAGE: lua fish1.lua [OPTIONS] [-g [ACTIONS</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#C3E88D;">OPTIONS:</span></span>
<span class="line"><span style="color:#C3E88D;">  -b  --budget  number of evaluations = 16</span></span>
<span class="line"><span style="color:#C3E88D;">  -f  --file    csv data file         = ../etc/data/auto93.csv</span></span>
<span class="line"><span style="color:#C3E88D;">  -g  --go      start up action       = ls</span></span>
<span class="line"><span style="color:#C3E88D;">  -h  --help    show help             = false</span></span>
<span class="line"><span style="color:#C3E88D;">  -p  --p       distance coefficient  = 2</span></span>
<span class="line"><span style="color:#C3E88D;">  -s  --seed    random number seed    = 10019</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#C3E88D;">ACTIONS:</span></span>
<span class="line"><span style="color:#89DDFF;">]] </span></span>
<span class="line"></span></code></pre></div><p>Note the hook from here to the above library</p><ul><li>at start up, my code runs eg[<code>the.go</code>] which has a default of <code>ls</code> and which can be changed on the command line using the <code>-g</code> flag;</li><li>before running any demo, my code resets the seed to the value of <code>the.seed</code> which has a default value of <code>10019</code> and a which can be changed on the command-line using the <code>-s</code> flag.</li></ul><p>The parser is simple (if you understand regular expression captures):</p><div class="language-lua"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">settings</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">s</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">    </span><span style="color:#A6ACCD;font-style:italic;">t</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">-- e.g.             -h           --help show help   = false</span></span>
<span class="line"><span style="color:#A6ACCD;">  t</span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;">{};</span><span style="color:#FFCB6B;">s</span><span style="color:#A6ACCD;">:</span><span style="color:#82AAFF;">gsub</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">\\n</span><span style="color:#C3E88D;">[%s]+[-][%S]+[%s]+[-][-]([%S]+)[^</span><span style="color:#A6ACCD;">\\n</span><span style="color:#C3E88D;">]+= ([%S]+)</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">              </span><span style="color:#89DDFF;font-style:italic;">function</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">k</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;font-style:italic;">v</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> t[k]</span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;">coerce</span><span style="color:#A6ACCD;">(v) </span><span style="color:#89DDFF;font-style:italic;">end</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> t </span><span style="color:#89DDFF;font-style:italic;">end</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">coerce</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">s</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">    </span><span style="color:#A6ACCD;font-style:italic;">fun</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;font-style:italic;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">fun</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">s1</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> s1</span><span style="color:#89DDFF;">==</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">true</span><span style="color:#89DDFF;">&quot; </span><span style="color:#89DDFF;font-style:italic;">then</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">true</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">elseif</span><span style="color:#A6ACCD;"> s1</span><span style="color:#89DDFF;">==</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">false</span><span style="color:#89DDFF;">&quot; </span><span style="color:#89DDFF;font-style:italic;">then</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">false</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">end</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> s1 </span><span style="color:#89DDFF;font-style:italic;">end</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">math.tointeger</span><span style="color:#A6ACCD;">(s) </span><span style="color:#89DDFF;">or</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">tonumber</span><span style="color:#A6ACCD;">(s) </span><span style="color:#89DDFF;">or</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">fun</span><span style="color:#A6ACCD;">(</span><span style="color:#FFCB6B;">s</span><span style="color:#A6ACCD;">:</span><span style="color:#82AAFF;">match</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">^%s*(.-)%s*$</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">) </span><span style="color:#89DDFF;font-style:italic;">end</span></span>
<span class="line"></span></code></pre></div><p>The default settings can also be updated via the command-line (which in LUA can be found in the <code>args</code> array):</p><div class="language-lua"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">cli</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">options</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;"> k,v </span><span style="color:#89DDFF;font-style:italic;">in</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">pairs</span><span style="color:#A6ACCD;">(options) </span><span style="color:#89DDFF;font-style:italic;">do</span></span>
<span class="line"><span style="color:#A6ACCD;">    v</span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;">tostring</span><span style="color:#A6ACCD;">(v)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;"> n,x </span><span style="color:#89DDFF;font-style:italic;">in</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">ipairs</span><span style="color:#A6ACCD;">(arg) </span><span style="color:#89DDFF;font-style:italic;">do</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> x</span><span style="color:#89DDFF;">==</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">-</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">..</span><span style="color:#A6ACCD;">(</span><span style="color:#FFCB6B;">k</span><span style="color:#A6ACCD;">:</span><span style="color:#82AAFF;">sub</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;">,</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;">)) </span><span style="color:#89DDFF;">or</span><span style="color:#A6ACCD;"> x</span><span style="color:#89DDFF;">==</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">--</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">..</span><span style="color:#A6ACCD;">k </span><span style="color:#89DDFF;font-style:italic;">then</span></span>
<span class="line"><span style="color:#A6ACCD;">         v </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> v</span><span style="color:#89DDFF;">==</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">false</span><span style="color:#89DDFF;">&quot; </span><span style="color:#89DDFF;">and</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">true</span><span style="color:#89DDFF;">&quot; </span><span style="color:#89DDFF;">or</span><span style="color:#A6ACCD;"> v</span><span style="color:#89DDFF;">==</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">true</span><span style="color:#89DDFF;">&quot; </span><span style="color:#89DDFF;">and</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">false</span><span style="color:#89DDFF;">&quot; </span><span style="color:#89DDFF;">or</span><span style="color:#A6ACCD;"> arg[n</span><span style="color:#89DDFF;">+</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;">] </span><span style="color:#89DDFF;font-style:italic;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">end</span></span>
<span class="line"><span style="color:#A6ACCD;">    options[k] </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">coerce</span><span style="color:#A6ACCD;">(v) </span><span style="color:#89DDFF;font-style:italic;">end</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> options </span><span style="color:#89DDFF;font-style:italic;">end</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">the </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">cli</span><span style="color:#A6ACCD;">(</span><span style="color:#82AAFF;">settings</span><span style="color:#A6ACCD;">(help))</span></span>
<span class="line"></span></code></pre></div><p>Note one short cut in the above:</p><ul><li>when the <code>cli</code> function looks for update, <ul><li>if the default is non-boolean then the flag <code>-x</code> must be followed by a value</li><li>if the default is a boolean, then the flag <code>-x</code> has no value (and the default is just inverted, so trues become falses and falses become trues)</li></ul></li></ul>`,49),t=[e];function p(r,c,i,y,D,A){return a(),n("div",null,t)}const d=s(o,[["render",p]]);export{F as __pageData,d as default};
