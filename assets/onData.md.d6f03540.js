import{_ as s,c as n,o as a,a as l}from"./app.c68688ac.js";const F=JSON.parse('{"title":"Data","description":"","frontmatter":{},"headers":[{"level":2,"title":"How TESTED stores DATA","slug":"how-tested-stores-data","link":"#how-tested-stores-data","children":[]},{"level":2,"title":"DATA, ROW, COLS","slug":"data-row-cols","link":"#data-row-cols","children":[]},{"level":2,"title":"SYM","slug":"sym","link":"#sym","children":[]},{"level":2,"title":"NUM","slug":"num","link":"#num","children":[]}],"relativePath":"onData.md"}'),o={name:"onData.md"},p=l(`<h1 id="data" tabindex="-1">Data <a class="header-anchor" href="#data" aria-hidden="true">#</a></h1><h2 id="how-tested-stores-data" tabindex="-1">How TESTED stores DATA <a class="header-anchor" href="#how-tested-stores-data" aria-hidden="true">#</a></h2><p>A repeated structure in my code are the following classes:</p><table><thead><tr><th>class</th><th>notes</th></tr></thead><tbody><tr><td>NUM</td><td>summarize stream of numbers</td></tr><tr><td>SYM</td><td>summarize stream of symbols</td></tr><tr><td>ROW</td><td>container for one record</td></tr><tr><td>COLS</td><td>factory for createing NUMs and SYms</td></tr><tr><td>DATA</td><td>container for ROWs, summaized into NUMs or SSYMs</td></tr></tbody></table><p>Conceptually there is a sixth class that is a super class of NUM and SYM... but I don&#39;t actually implement that.</p><p>My CSV parser generates theses instances from data where row1 is some column headers and the other rows are the actual data.</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">Clndrs,Volume, HpX,  Lbs-,  Acc+,  Model, origin, Mpg+</span></span>
<span class="line"><span style="color:#A6ACCD;">4,      97,     52,  2130,  24.6,  82,    2,      40</span></span>
<span class="line"><span style="color:#A6ACCD;">4,      97,     54,  2254,  23.5,  72,    2,      20</span></span>
<span class="line"><span style="color:#A6ACCD;">4,      97,     78,  2188,  15.8,  80,    2,      30</span></span>
<span class="line"><span style="color:#A6ACCD;">4,     151,     90,  2950,  17.3,  82,    1,      30</span></span>
<span class="line"><span style="color:#A6ACCD;">6,     200,     ?,   2875,  17,    74,    1,      20</span></span>
<span class="line"><span style="color:#A6ACCD;">6,     146,     97,  2815,  14.5,  77,    3,      20</span></span>
<span class="line"><span style="color:#A6ACCD;">8,     267,    125,  3605,  15,    79,    1,      20</span></span>
<span class="line"><span style="color:#A6ACCD;">8,     307,    130,  4098,  14,    72,    1,      10</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>In these names:</p><ul><li>we skip columns whose names end in <code>X</code>;</li><li>if the name starts in uppercase, we have a number</li><li>if the name ends with &quot;-&quot; or &quot;+&quot; then its a goal we want to minimize or maximize <ul><li>and for such items, we will set &quot;w&quot; to 1.</li></ul></li></ul><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">list of names      call                 weight    goal?</span></span>
<span class="line"><span style="color:#A6ACCD;">--------------     ----------------     ------    -----</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">{ &quot;Clndrs&quot;,        NUM(1, &quot;Clndrs&quot;)     1         n</span></span>
<span class="line"><span style="color:#A6ACCD;">  &quot;Volume&quot;,        NUM(2, &quot;Volume&quot;)     1         n</span></span>
<span class="line"><span style="color:#A6ACCD;">  &quot;HpX&quot;,           NUM(3, &quot;HpX&quot;)        1         n</span></span>
<span class="line"><span style="color:#A6ACCD;">  &quot;Lbs-&quot;,          NUM(4, &quot;Lbs-&quot;)         -1         y</span></span>
<span class="line"><span style="color:#A6ACCD;">  &quot;Acc+&quot;,          NUM(5, &quot;Acc+&quot;)       1            y</span></span>
<span class="line"><span style="color:#A6ACCD;">  &quot;Model&quot;,         NUM(6, &quot;Model&quot;)      1         n</span></span>
<span class="line"><span style="color:#A6ACCD;">  &quot;origin&quot;,        SYM(7, &quot;origin&quot;)               n</span></span>
<span class="line"><span style="color:#A6ACCD;">  &quot;Mpg+&quot;}          NUM(8, &quot;Mgp+&quot;)       1            y</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>So the these CSV first line gets processed by a factory that generates a set of goals <code>i.y</code> and other columns <code>i.x</code>:</p><div class="language-lua"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">COLS</span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;">obj</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">COLS</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">COLS</span><span style="color:#A6ACCD;">.</span><span style="color:#82AAFF;">new</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">i</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;font-style:italic;">t</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">     </span><span style="color:#A6ACCD;font-style:italic;">col</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;font-style:italic;">cols</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">  i.</span><span style="color:#FFCB6B;">names</span><span style="color:#A6ACCD;">, i.</span><span style="color:#FFCB6B;">all</span><span style="color:#A6ACCD;">, i.</span><span style="color:#FFCB6B;">x</span><span style="color:#A6ACCD;">, i.</span><span style="color:#FFCB6B;">y</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> t, {}, {}, {}</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;"> n,s </span><span style="color:#89DDFF;font-style:italic;">in</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">pairs</span><span style="color:#A6ACCD;">(t) </span><span style="color:#89DDFF;font-style:italic;">do</span><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;">-- like PYTHONS&#39;s for n,s in enumerate(t) do..</span></span>
<span class="line"><span style="color:#A6ACCD;">    col </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">s</span><span style="color:#A6ACCD;">:</span><span style="color:#82AAFF;">find</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">^[A-Z]+</span><span style="color:#89DDFF;">&quot; </span><span style="color:#89DDFF;">and</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">NUM</span><span style="color:#A6ACCD;">(n,s) </span><span style="color:#89DDFF;">or</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">SYM</span><span style="color:#A6ACCD;">(n,s)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">push</span><span style="color:#A6ACCD;">(i.</span><span style="color:#FFCB6B;">all</span><span style="color:#A6ACCD;">, col)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">not</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">s</span><span style="color:#A6ACCD;">:</span><span style="color:#82AAFF;">find</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">X$</span><span style="color:#89DDFF;">&quot; </span><span style="color:#89DDFF;font-style:italic;">then</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#82AAFF;">push</span><span style="color:#A6ACCD;">(</span><span style="color:#FFCB6B;">s</span><span style="color:#A6ACCD;">:</span><span style="color:#82AAFF;">find</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">[!+-]$</span><span style="color:#89DDFF;">&quot; </span><span style="color:#89DDFF;">and</span><span style="color:#A6ACCD;"> i.</span><span style="color:#FFCB6B;">y</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">or</span><span style="color:#A6ACCD;"> i.</span><span style="color:#FFCB6B;">x</span><span style="color:#A6ACCD;">, col) </span><span style="color:#89DDFF;font-style:italic;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">end</span></span>
<span class="line"></span></code></pre></div><h2 id="data-row-cols" tabindex="-1">DATA, ROW, COLS <a class="header-anchor" href="#data-row-cols" aria-hidden="true">#</a></h2><div class="language-mermaid"><button title="Copy Code" class="copy"></button><span class="lang">mermaid</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">classDiagram</span></span>
<span class="line"><span style="color:#FFCB6B;">COL</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">&lt;--</span><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">NUM</span></span>
<span class="line"><span style="color:#FFCB6B;">COL</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">&lt;--</span><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">SYM</span></span>
<span class="line"><span style="color:#FFCB6B;">DATA</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">&quot;1&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">--</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">&quot;1..*&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ROW</span><span style="color:#A6ACCD;">  </span><span style="color:#C3E88D;">: rows </span></span>
<span class="line"><span style="color:#FFCB6B;">DATA</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">&quot;1&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">--</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">&quot;1&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">COLS</span><span style="color:#A6ACCD;">  </span><span style="color:#C3E88D;">: cols</span></span>
<span class="line"><span style="color:#FFCB6B;">COLS</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">&quot;1&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">--</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">&quot;1..*&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">COL</span><span style="color:#A6ACCD;">  </span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">COLS</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">   name: </span><span style="color:#C792EA;">strs</span></span>
<span class="line"><span style="color:#A6ACCD;">   x : </span><span style="color:#C792EA;">ROWs</span></span>
<span class="line"><span style="color:#A6ACCD;">   y : </span><span style="color:#C792EA;">ROWs</span></span>
<span class="line"><span style="color:#A6ACCD;">   all: </span><span style="color:#C792EA;">rows</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">}</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ROW</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  cells : </span><span style="color:#C792EA;">lst</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">}</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">COL</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  n,at: int,int</span></span>
<span class="line"><span style="color:#A6ACCD;">  txt: </span><span style="color:#C792EA;">str</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">}</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">NUM</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  w : -1 </span><span style="color:#C792EA;">or</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">1</span></span>
<span class="line"><span style="color:#A6ACCD;">  mu,m2 : 0,0</span></span>
<span class="line"><span style="color:#A6ACCD;">  lo,hi: </span><span style="color:#C792EA;">num</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">}</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">SYM</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  has : </span><span style="color:#C792EA;">dict</span></span>
<span class="line"><span style="color:#A6ACCD;">  mode : </span><span style="color:#C792EA;">str</span></span>
<span class="line"><span style="color:#A6ACCD;">  most: </span><span style="color:#C792EA;">0</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">}</span></span>
<span class="line"></span></code></pre></div><p>In the above, DATA is the ringmaster that controls eigjt special cases:</p><ul><li>DATA is loaded from either <ul><li>a disc csv file [1]</li><li>rows from some other source [2]</li></ul></li><li>When receiving new data, that data could be <ul><li>a simple list [3]</li><li>a ROW (which is a container for a list) [4]</li></ul></li><li>When that data arrives, it is either -the first row (with the column names) [5] <ul><li>or it is all other other rows of data. [6]</li></ul></li><li>When we work with data, we can either share the same ROWs [7] (e.g. if we are recursively cluster the same data) or make new rows each time [8].</li></ul><div class="language-lua"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">ROW</span><span style="color:#A6ACCD;">.</span><span style="color:#82AAFF;">new</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">i</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;font-style:italic;">t</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> i.</span><span style="color:#FFCB6B;">cells</span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;">t; i.</span><span style="color:#FFCB6B;">yseen</span><span style="color:#89DDFF;">=false</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">end</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">DATA</span><span style="color:#A6ACCD;">.</span><span style="color:#82AAFF;">new</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">i</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;font-style:italic;">src</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">     </span><span style="color:#A6ACCD;font-style:italic;">fun</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">  i.</span><span style="color:#FFCB6B;">rows</span><span style="color:#A6ACCD;">, i.</span><span style="color:#FFCB6B;">cols</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> {}, </span><span style="color:#89DDFF;">nil</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">fun</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">function</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">x</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">i</span><span style="color:#A6ACCD;">:</span><span style="color:#82AAFF;">add</span><span style="color:#A6ACCD;">(x) </span><span style="color:#89DDFF;font-style:italic;">end</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">type</span><span style="color:#A6ACCD;">(src) </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">string</span><span style="color:#89DDFF;">&quot; </span><span style="color:#89DDFF;font-style:italic;">then</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">csv</span><span style="color:#A6ACCD;">(src,fun)  </span><span style="color:#676E95;font-style:italic;">-- [1] load from a csv file on disk</span></span>
<span class="line"><span style="color:#A6ACCD;">                           </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">map</span><span style="color:#A6ACCD;">(src </span><span style="color:#89DDFF;">or</span><span style="color:#A6ACCD;"> {}, fun)  </span><span style="color:#676E95;font-style:italic;">-- [2] load from a list</span></span>
<span class="line"><span style="color:#A6ACCD;">                           </span><span style="color:#89DDFF;font-style:italic;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">end</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">DATA</span><span style="color:#A6ACCD;">.</span><span style="color:#82AAFF;">add</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">i</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;font-style:italic;">t</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;">   i.</span><span style="color:#FFCB6B;">cols</span><span style="color:#A6ACCD;">          </span><span style="color:#676E95;font-style:italic;">-- [6] true if we have already seen the column names</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;font-style:italic;">then</span><span style="color:#A6ACCD;"> t </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> t.</span><span style="color:#FFCB6B;">cells</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">and</span><span style="color:#A6ACCD;"> t </span><span style="color:#89DDFF;">or</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">ROW</span><span style="color:#A6ACCD;">(t) </span><span style="color:#676E95;font-style:italic;">-- [3][4][7]</span></span>
<span class="line"><span style="color:#89DDFF;">       </span><span style="color:#676E95;font-style:italic;">-- t =ROW(t.cells and t.cells or t) -- [3][4][8] &quot;t&quot; can be a ROW or a simple list</span></span>
<span class="line"><span style="color:#A6ACCD;">       </span><span style="color:#82AAFF;">push</span><span style="color:#A6ACCD;">(i.</span><span style="color:#FFCB6B;">rows</span><span style="color:#A6ACCD;">, t) </span><span style="color:#676E95;font-style:italic;">-- add new data to &quot;i.rows&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">       i.</span><span style="color:#FFCB6B;">cols</span><span style="color:#A6ACCD;">:</span><span style="color:#82AAFF;">adds</span><span style="color:#A6ACCD;">(t)  </span><span style="color:#676E95;font-style:italic;">-- update the summary information in &quot;ic.ols&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#A6ACCD;"> i.</span><span style="color:#FFCB6B;">cols</span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;">COLS</span><span style="color:#A6ACCD;">(t)  </span><span style="color:#676E95;font-style:italic;">-- [5] here, we create &quot;i.cols&quot; from the first row</span></span>
<span class="line"><span style="color:#A6ACCD;">       </span><span style="color:#89DDFF;font-style:italic;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">end</span></span>
<span class="line"></span></code></pre></div><p>Note that adding something to DATA means also updating the column summaries:</p><div class="language-lua"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">COLS</span><span style="color:#A6ACCD;">.</span><span style="color:#82AAFF;">add</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">i</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;font-style:italic;">row</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;"> _,t </span><span style="color:#89DDFF;font-style:italic;">in</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">pairs</span><span style="color:#A6ACCD;">({i.</span><span style="color:#FFCB6B;">x</span><span style="color:#A6ACCD;">,i.</span><span style="color:#FFCB6B;">y</span><span style="color:#A6ACCD;">}) </span><span style="color:#89DDFF;font-style:italic;">do</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">-- update all the columns we are no skipping</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;"> _,col </span><span style="color:#89DDFF;font-style:italic;">in</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">pairs</span><span style="color:#A6ACCD;">(t) </span><span style="color:#89DDFF;font-style:italic;">do</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#FFCB6B;">col</span><span style="color:#A6ACCD;">:</span><span style="color:#82AAFF;">add</span><span style="color:#A6ACCD;">(row.</span><span style="color:#FFCB6B;">cells</span><span style="color:#A6ACCD;">[col.</span><span style="color:#FFCB6B;">at</span><span style="color:#A6ACCD;">]) </span><span style="color:#89DDFF;font-style:italic;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">end</span></span>
<span class="line"></span></code></pre></div><p>One thing we can do here is create a new table with the identical structure.</p><div class="language-lua"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">DATA</span><span style="color:#A6ACCD;">.</span><span style="color:#82AAFF;">clone</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">i</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">  </span><span style="color:#A6ACCD;font-style:italic;">init</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">     </span><span style="color:#A6ACCD;font-style:italic;">data</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">  data</span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;">DATA</span><span style="color:#A6ACCD;">({i.</span><span style="color:#FFCB6B;">cols</span><span style="color:#A6ACCD;">.</span><span style="color:#FFCB6B;">names</span><span style="color:#A6ACCD;">})</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">map</span><span style="color:#A6ACCD;">(init </span><span style="color:#89DDFF;">or</span><span style="color:#A6ACCD;"> {}, </span><span style="color:#89DDFF;font-style:italic;">function</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">x</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">data</span><span style="color:#A6ACCD;">:</span><span style="color:#82AAFF;">add</span><span style="color:#A6ACCD;">(x) </span><span style="color:#89DDFF;font-style:italic;">end</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> data </span><span style="color:#89DDFF;font-style:italic;">end</span></span>
<span class="line"></span></code></pre></div><h2 id="sym" tabindex="-1">SYM <a class="header-anchor" href="#sym" aria-hidden="true">#</a></h2><p>When a DATA instance stores some rows, those rows are summarized in NUM or SYM instances. Note that: NUM and SYM all have:</p><ul><li>an <code>add</code> method (for updating stuff) and</li><li>a <code>mid</code> method for reporting central tendancy (mid=middle)</li><li>a <code>div</code> methods for reporting the diversion around that center (div=diversity)</li></ul><div class="language-lua"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">local</span><span style="color:#A6ACCD;"> SYM </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> lib.</span><span style="color:#82AAFF;">obj</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">SYM</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">SYM</span><span style="color:#A6ACCD;">:</span><span style="color:#82AAFF;">new</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">--&gt; SYM; constructor</span></span>
<span class="line"><span style="color:#A6ACCD;">  self.</span><span style="color:#FFCB6B;">n</span><span style="color:#A6ACCD;">   </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span></span>
<span class="line"><span style="color:#A6ACCD;">  self.</span><span style="color:#FFCB6B;">has</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> {}</span></span>
<span class="line"><span style="color:#A6ACCD;">  self.</span><span style="color:#FFCB6B;">most</span><span style="color:#A6ACCD;">, self.</span><span style="color:#FFCB6B;">mode</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;">,</span><span style="color:#89DDFF;">nil</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">end</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">SYM</span><span style="color:#A6ACCD;">:</span><span style="color:#82AAFF;">add</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">x</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">--&gt; nil;  update counts of things seen so far</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> x </span><span style="color:#89DDFF;">~=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">?</span><span style="color:#89DDFF;">&quot; </span><span style="color:#89DDFF;font-style:italic;">then</span></span>
<span class="line"><span style="color:#A6ACCD;">   self.</span><span style="color:#FFCB6B;">n</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> self.</span><span style="color:#FFCB6B;">n</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span></span>
<span class="line"><span style="color:#A6ACCD;">   self.</span><span style="color:#FFCB6B;">has</span><span style="color:#A6ACCD;">[x] </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> (self.</span><span style="color:#FFCB6B;">has</span><span style="color:#A6ACCD;">[x] </span><span style="color:#89DDFF;">or</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;">) </span><span style="color:#676E95;font-style:italic;">-- if &quot;x&quot; not seen before, init counter to 0</span></span>
<span class="line"><span style="color:#A6ACCD;">   </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> self.</span><span style="color:#FFCB6B;">has</span><span style="color:#A6ACCD;">[x] </span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> self.</span><span style="color:#FFCB6B;">most</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">then</span></span>
<span class="line"><span style="color:#A6ACCD;">     self.</span><span style="color:#FFCB6B;">most</span><span style="color:#A6ACCD;">,self.</span><span style="color:#FFCB6B;">mode</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> self.</span><span style="color:#FFCB6B;">has</span><span style="color:#A6ACCD;">[x], x </span><span style="color:#89DDFF;font-style:italic;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">end</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">SYM</span><span style="color:#A6ACCD;">:</span><span style="color:#82AAFF;">mid</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">x</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">--&gt; n; return the mode</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> self.</span><span style="color:#FFCB6B;">mode</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">end</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">SYM</span><span style="color:#A6ACCD;">:</span><span style="color:#82AAFF;">div</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">x</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">--&gt; n; return the entropy</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">local</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">fun</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">p</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> p</span><span style="color:#89DDFF;">*</span><span style="color:#82AAFF;">math.log</span><span style="color:#A6ACCD;">(p,</span><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;">) </span><span style="color:#89DDFF;font-style:italic;">end</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">local</span><span style="color:#A6ACCD;"> e</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;">; </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;"> _,n </span><span style="color:#89DDFF;font-style:italic;">in</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">pairs</span><span style="color:#A6ACCD;">(self.</span><span style="color:#FFCB6B;">has</span><span style="color:#A6ACCD;">) </span><span style="color:#89DDFF;font-style:italic;">do</span><span style="color:#A6ACCD;"> e </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> e </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">fun</span><span style="color:#A6ACCD;">(n</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">self.</span><span style="color:#FFCB6B;">n</span><span style="color:#A6ACCD;">) </span><span style="color:#89DDFF;font-style:italic;">end</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> e </span><span style="color:#89DDFF;font-style:italic;">end</span></span>
<span class="line"></span></code></pre></div><img src="https://miro.medium.com/max/720/1*mEIWwyolHOdY3TmBus7HtQ.webp" align="right" width="400"><p>By the way, to understand SYM.div (entropy), think of it as</p><ul><li>the effort required by binary chop to find clumps of a signal hiding in a stream of noise</li><li>and the more diverse the distribution, the greater that effort.</li></ul><p>e.g. in a vector of size 4,</p><ul><li>nazis have a &quot;1&quot; near one end</li><li>and England are all the other bits</li><li>This means that 1/4% of the time we need to do binary chops to find nazies (i.e. $p_{\\mathit{nazis}}=.25$)</li><li>and 75% if the time we need to binary chops to find Englad (i.e. $p_{\\mathit{england}}$=.75)</li><li>Each chop will cost us $log2(p_i)$ so the total effort is $e=-\\sum_i(p_i\\times log_2(p_i))$ <ul><li>By convention, we add a minus sign at the front (else all entropies will be negative).</li></ul></li></ul><p>(Actually, formally entropy has other definition:</p><ul><li>The entropy of a discrete random variable is a lower bound on the expected number of bits required to transfer the result of the random variable.</li><li>Also, entropy of continuous distributions is defined, but we do not use that in this subject.)</li></ul><h2 id="num" tabindex="-1">NUM <a class="header-anchor" href="#num" aria-hidden="true">#</a></h2><div class="language-lua"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">local</span><span style="color:#A6ACCD;"> NUM </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> lib.</span><span style="color:#82AAFF;">obj</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">NUM</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">NUM</span><span style="color:#A6ACCD;">:</span><span style="color:#82AAFF;">new</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">--&gt; NUM;  constructor;</span></span>
<span class="line"><span style="color:#A6ACCD;">  self.</span><span style="color:#FFCB6B;">n</span><span style="color:#A6ACCD;">, self.</span><span style="color:#FFCB6B;">mu</span><span style="color:#A6ACCD;">, self.</span><span style="color:#FFCB6B;">m2</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;">, </span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;">, </span><span style="color:#F78C6C;">0</span></span>
<span class="line"><span style="color:#A6ACCD;">  self.</span><span style="color:#FFCB6B;">lo</span><span style="color:#A6ACCD;">, self.</span><span style="color:#FFCB6B;">hi</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">math.huge</span><span style="color:#A6ACCD;">, </span><span style="color:#89DDFF;">-math.huge</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">end</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">NUM</span><span style="color:#A6ACCD;">:</span><span style="color:#82AAFF;">add</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">n</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">--&gt; NUM; add \`n\`, update min,max,standard deviation</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> n </span><span style="color:#89DDFF;">~=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">?</span><span style="color:#89DDFF;">&quot; </span><span style="color:#89DDFF;font-style:italic;">then</span></span>
<span class="line"><span style="color:#A6ACCD;">    self.</span><span style="color:#FFCB6B;">n</span><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> self.</span><span style="color:#FFCB6B;">n</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">local</span><span style="color:#A6ACCD;"> d </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> n </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> self.</span><span style="color:#FFCB6B;">mu</span></span>
<span class="line"><span style="color:#A6ACCD;">    self.</span><span style="color:#FFCB6B;">mu</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> self.</span><span style="color:#FFCB6B;">mu</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> d</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">self.</span><span style="color:#FFCB6B;">n</span></span>
<span class="line"><span style="color:#A6ACCD;">    self.</span><span style="color:#FFCB6B;">m2</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> self.</span><span style="color:#FFCB6B;">m2</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> d</span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">(n </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> self.</span><span style="color:#FFCB6B;">mu</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    self.</span><span style="color:#FFCB6B;">sd</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> (self.</span><span style="color:#FFCB6B;">m2</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">or</span><span style="color:#A6ACCD;"> self.</span><span style="color:#FFCB6B;">n</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;">) </span><span style="color:#89DDFF;">and</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">or</span><span style="color:#A6ACCD;"> (self.</span><span style="color:#FFCB6B;">m2</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">(self.</span><span style="color:#FFCB6B;">n</span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;">))</span><span style="color:#89DDFF;">^</span><span style="color:#F78C6C;">0.5</span></span>
<span class="line"><span style="color:#A6ACCD;">    self.</span><span style="color:#FFCB6B;">lo</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">math.min</span><span style="color:#A6ACCD;">(n, self.</span><span style="color:#FFCB6B;">lo</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    self.</span><span style="color:#FFCB6B;">hi</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">math.max</span><span style="color:#A6ACCD;">(n, self.</span><span style="color:#FFCB6B;">hi</span><span style="color:#A6ACCD;">) </span><span style="color:#89DDFF;font-style:italic;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">end</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">NUM</span><span style="color:#A6ACCD;">:</span><span style="color:#82AAFF;">mid</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">x</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> self.</span><span style="color:#FFCB6B;">mu</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">--&gt; n; return mean</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">NUM</span><span style="color:#A6ACCD;">:</span><span style="color:#82AAFF;">div</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">x</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> self.</span><span style="color:#FFCB6B;">sd</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">--&gt; n; return standard deviation</span></span>
<span class="line"></span></code></pre></div><p>If we are talking standard deviation, then we had better talk about normal curves.</p><p>The French mathematician Abraham de Moivre [^deMo1718] notes that probabilities associated with discretely generated random variables (such as are obtained by flipping a coin or rolling a die) can be approximated by the area under the graph of an exponential function.</p><p>This function was generalized by Laplace[^Lap1812] into the first central limit theorem, which proved that probabilities for almost all independent and identically distributed random variables converge rapidly (with sample size) to the area under an exponential function—that is, to a normal distribution.</p>`,37),t=[p];function e(c,r,y,C,A,i){return a(),n("div",null,t)}const d=s(o,[["render",e]]);export{F as __pageData,d as default};
